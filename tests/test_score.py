import pytest

from bridge_env import Bid, Contract, Suit, Vul, score

# http://web2.acbl.org/documentLibrary/play/InstantScorer.pdf
#
# SCORE_TABLE[n][taken_trick_num - bid_level - 6][m]
# n =   0: 1 minor
#       1: 1 major
#       2: 1 NT
#       3: 2 minor
#       ...
# (n = (bid_level - 1) * 3 + (0: minor, 1: major, 2: NT))
#
# m =   0: non vul
#       1: non vul, doubled
#       2: non vul, redoubled
#       3: vul
#       4: vul, double
#       5: vul, redouble
SCORE_TABLE = (((70, 140, 230, 70, 140, 230),
                (90, 240, 430, 90, 340, 630),
                (110, 340, 630, 110, 540, 1030),
                (130, 440, 830, 130, 740, 1430),
                (150, 540, 1030, 150, 940, 1830),
                (170, 640, 1230, 170, 1140, 2230),
                (190, 740, 1430, 190, 1340, 2630)),
               ((80, 160, 520, 80, 160, 720),
                (110, 260, 720, 110, 360, 1120),
                (140, 360, 920, 140, 560, 1520),
                (170, 460, 1120, 170, 760, 1920),
                (200, 560, 1320, 200, 960, 2320),
                (230, 660, 1520, 230, 1160, 2720),
                (260, 760, 1720, 260, 1360, 3120)),
               ((90, 180, 560, 90, 180, 760),
                (120, 280, 760, 120, 380, 1160),
                (150, 380, 960, 150, 580, 1560),
                (180, 480, 1160, 180, 780, 1960),
                (210, 580, 1360, 210, 980, 2360),
                (240, 680, 1560, 240, 1180, 2760),
                (270, 780, 1760, 270, 1380, 3160)),
               ((90, 180, 560, 90, 180, 760),
                (110, 280, 760, 110, 380, 1160),
                (130, 380, 960, 130, 580, 1560),
                (150, 480, 1160, 150, 780, 1960),
                (170, 580, 1360, 170, 980, 2360),
                (190, 680, 1560, 190, 1180, 2760)),
               ((110, 470, 640, 110, 670, 840),
                (140, 570, 840, 140, 870, 1240),
                (170, 670, 1040, 170, 1070, 1640),
                (200, 770, 1240, 200, 1270, 2040),
                (230, 870, 1440, 230, 1470, 2440),
                (260, 970, 1640, 260, 1670, 2840)),
               ((120, 490, 680, 120, 690, 880),
                (150, 590, 880, 150, 890, 1280),
                (180, 690, 1080, 180, 1090, 1680),
                (210, 790, 1280, 210, 1290, 2080),
                (240, 890, 1480, 240, 1490, 2480),
                (270, 990, 1680, 270, 1690, 2880)),
               ((110, 470, 640, 110, 670, 840),
                (130, 570, 840, 130, 870, 1240),
                (150, 670, 1040, 150, 1070, 1640),
                (170, 770, 1240, 170, 1270, 2040),
                (190, 870, 1440, 190, 1470, 2440)),
               ((140, 530, 760, 140, 730, 960),
                (170, 630, 960, 170, 930, 1360),
                (200, 730, 1160, 200, 1130, 1760),
                (230, 830, 1360, 230, 1330, 2160),
                (260, 930, 1560, 260, 1530, 2560)),
               ((400, 550, 800, 600, 750, 1000),
                (430, 650, 1000, 630, 950, 1400),
                (460, 750, 1200, 660, 1150, 1800),
                (490, 850, 1400, 690, 1350, 2200),
                (520, 950, 1600, 720, 1550, 2600)),
               ((130, 510, 720, 130, 710, 920),
                (150, 610, 920, 150, 910, 1320),
                (170, 710, 1120, 170, 1110, 1720),
                (190, 810, 1320, 190, 1310, 2120)),
               ((420, 590, 880, 620, 790, 1080),
                (450, 690, 1080, 650, 990, 1480),
                (480, 790, 1280, 680, 1190, 1880),
                (510, 890, 1480, 710, 1390, 2280)),
               ((430, 610, 920, 630, 810, 1120),
                (460, 710, 1120, 660, 1010, 1520),
                (490, 810, 1320, 690, 1210, 1920),
                (520, 910, 1520, 720, 1410, 2320)),
               ((400, 550, 800, 600, 750, 1000),
                (420, 650, 1000, 620, 950, 1400),
                (440, 750, 1200, 640, 1150, 1800)),
               ((450, 650, 1000, 650, 850, 1200),
                (480, 750, 1200, 680, 1050, 1600),
                (510, 850, 1400, 710, 1250, 2000)),
               ((460, 670, 1040, 660, 870, 1240),
                (490, 770, 1240, 690, 1070, 1640),
                (520, 870, 1440, 720, 1270, 2040)),
               ((920, 1090, 1380, 1370, 1540, 1830),
                (940, 1190, 1580, 1390, 1740, 2230)),
               ((980, 1210, 1620, 1430, 1660, 2070),
                (1010, 1310, 1820, 1460, 1860, 2470)),
               ((990, 1230, 1660, 1440, 1680, 2110),
                (1020, 1330, 1860, 1470, 1880, 2510)),
               ((1440, 1630, 1960, 2140, 2330, 2660),),
               ((1510, 1770, 2240, 2210, 2470, 2940),),
               ((1520, 1790, 2280, 2220, 2490, 2980),))

# DOWN_TABLE[down_num - 1][n]
# n =   0: non vul
#       1: non vul, doubled
#       2: non vul, redoubled
#       3: vul
#       4: vul, double
#       5: vul, redouble
DOWN_TABLE = ((50, 100, 200, 100, 200, 400),
              (100, 300, 600, 200, 500, 1000,),
              (150, 500, 1000, 300, 800, 1600),
              (200, 800, 1600, 400, 1100, 2200),
              (250, 1100, 2200, 500, 1400, 2800),
              (300, 1400, 2800, 600, 1700, 3400),
              (350, 1700, 3400, 700, 2000, 4000),
              (400, 2000, 4000, 800, 2300, 4600),
              (450, 2300, 4600, 900, 2600, 5200),
              (500, 2600, 5200, 1000, 2900, 5800),
              (550, 2900, 5800, 1100, 3200, 6400),
              (600, 3200, 6400, 1200, 3500, 7000),
              (650, 3500, 7000, 1300, 3800, 7600))


class TestScore:

    @pytest.mark.parametrize('bid', [bid for bid in Bid if
                                     bid not in {Bid.Pass, Bid.X, Bid.XX}])
    @pytest.mark.parametrize('x', [False, True])
    @pytest.mark.parametrize('xx', [False, True])
    @pytest.mark.parametrize('vul', [False, True])
    @pytest.mark.parametrize('taken_trick_num', list(range(14)))
    def test_calc_bid_score(self, bid: Bid, x, xx, vul, taken_trick_num):
        assert bid.level is not None
        assert bid.suit is not None

        overtrick_num = taken_trick_num - bid.level - 6

        m = 0
        if vul:
            m += 3
        if xx:
            m += 2
        elif x:
            m += 1

        if overtrick_num < 0:
            down_num = - overtrick_num
            expected_score = - DOWN_TABLE[down_num - 1][m]
        else:
            n = (bid.level - 1) * 3
            if bid.suit is Suit.NT:
                n += 2
            elif bid.suit.is_major():
                n += 1

            expected_score = SCORE_TABLE[n][overtrick_num][m]

        actural_score = score.calc_bid_score(bid, x, xx, vul, taken_trick_num)
        assert actural_score == expected_score

    @pytest.mark.parametrize(('point_difference', 'IMPs'), [
        (0, 0), (10, 0),
        (20, 1), (40, 1),
        (50, 2), (80, 2),
        (90, 3), (120, 3),
        (130, 4), (160, 4),
        (170, 5), (210, 5),
        (220, 6), (260, 6),
        (270, 7), (310, 7),
        (320, 8), (360, 8),
        (370, 9), (420, 9),
        (430, 10), (490, 10),
        (500, 11), (590, 11),
        (600, 12), (740, 12),
        (750, 13), (890, 13),
        (900, 14), (1090, 14),
        (1100, 15), (1290, 15),
        (1300, 16), (1490, 16),
        (1500, 17), (1740, 17),
        (1750, 18), (1990, 18),
        (2000, 19), (2240, 19),
        (2250, 20), (2490, 20),
        (2500, 21), (2990, 21),
        (3000, 22), (3490, 22),
        (3500, 23), (3990, 23),
        (4000, 24), (5000, 24)
    ])
    @pytest.mark.parametrize('negative', [False, True])
    def test_point_difference_to_imps(self, point_difference, IMPs, negative):
        if not negative:
            assert score.point_difference_to_imps(point_difference) == IMPs
        else:
            assert score.point_difference_to_imps(-point_difference) == -IMPs

    @pytest.mark.parametrize(('contract', 'taken_tricks', 'expected'), [
        (Contract(Bid.NT3), 10, 430),  # 3NT 10tricks
        (Contract(Bid.D4, xx=True, vul=Vul.BOTH), 13, 2120),  # 4DXXVul 13tricks
        (Contract(Bid.D7), 13, 1440),  # 7D 13tricks
        (Contract(Bid.D6, xx=True), 13, 1580),  # 6DXX 13tricks
        (Contract(Bid.NT3), 10, 430),  # 3NT 10tricks
        (Contract(Bid.H2), 10, 170),  # 2H 10tricks
        (Contract(Bid.C3), 9, 110),  # 3C 9tricks
        (Contract(Bid.S4, x=True), 10, 590),  # 4SX 11tricks
        (Contract(Bid.Pass), 0, 0)  # Passed Out
    ])
    def test_calc_score(self, contract, taken_tricks, expected):
        assert score.calc_score(contract, taken_tricks) == expected

    @pytest.mark.parametrize(('score1', 'score2', 'expected'),
                             [(450, 50, 11),
                              (1100, -420, 12),
                              (100, 620, 12),
                              (600, -600, 0),
                              (50, 0, 2)])
    def test_score_to_imp(self, score1, score2, expected):
        assert score.score_to_imp(score1, score2) == expected
